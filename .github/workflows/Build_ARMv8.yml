#===============================================
# Description: Build OpenWrt
# File name: build-openwrt.yml
# Lisence: MIT
# Author: P3TERX
# https://github.com/P3TERX
#===============================================

name: Build ARMv8 OpenWrt


on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  #schedule:
    #- cron: 0 18 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: armv8/feeds.conf.default
  CONFIG_FILE: armv8/.config
  DIY_P1_SH: armv8/diy-part1.sh
  DIY_P2_SH: armv8/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: ARMv8-ROOTFS
  PRODUCT_NAME: ARMv8

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: Check server configuration
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/compile-kernel/tools/script/ubuntu2204-make-openwrt-depends)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        Author=$(git show -s --date=short --format="Author: %an")
        Date=$(git show -s --date=short --format="date: %cd")
        Commit=$(git show -s --date=short --format="commit: %s")
        Hash=$(git show -s --date=short --format="commit hash: %h")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "author=$Author" >> $GITHUB_ENV
        echo "date=$Date" >> $GITHUB_ENV
        echo "commit=$Commit" >> $GITHUB_ENV
        echo "hash=$Hash" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "start=$(date +%s)" >> $GITHUB_ENV
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  
        
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e ">>>> $(nproc) thread compile ..."
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cp openwrt/.config build.config
        mkdir -p Packages
        cp -rf openwrt/bin/packages/*/*/*.ipk Packages
        tar -zcvf Packages.tar.gz Packages
        mv *.config *.tar.gz openwrt/bin/targets/*/*
        cp -rf openwrt/bin/targets lean
        rm -rf openwrt/* && cd lean/*/*
        rm -rf packages feeds.buildinfo sha256sums version.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: R${{ env.DATE }} for ${{ env.FILE_NAME }}
        artifacts: ${{ env.FIRMWARE }}/*
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GH_TOKEN }}
        body: |
          *🔥 此为简化版底包，非完整固件，不可直刷
          - 当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}
          
    - name: Package armvirt as openwrt
      uses: unifreq/openwrt_packit@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      env:
        OPENWRT_ARMVIRT: lean/*/*/*rootfs.tar.gz
        PACKAGE_SOC: s905d_s905x3
        WHOAMI: Jejz
        KERNEL_REPO_URL: https://github.com/Jejz168/OpenWrt/tree/main/backup/kernel
        KERNEL_VERSION_NAME: 5.4.191_5.10.100
        KERNEL_AUTO_LATEST: true
        GZIP_IMGS: .gz 
        
    - name: Upload openwrt to release
      uses: ncipollo/release-action@v1
      if: env.PACKAGED_STATUS == 'success' && !cancelled()
      with:
        name: R${{ env.DATE }} for ${{ env.PRODUCT_NAME }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.PRODUCT_NAME }}
        token: ${{ secrets.GH_TOKEN }}
        body: |
          *⭐️默认 IP：192.168.8.8 默认密码：password
          *🔥 这是 ARMv8 简化版（带docker），集成一些日常常用插件
          安装到 EMMC：系统 → 晶晨宝盒 → 安装 OpenWrt → 选择型号 → 安装
          升级 OpenWrt：系统 → 晶晨宝盒 → 手动上传更新 或者 在线下载更新
          当前使用版本:【编译前的最后一次➦[主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}
    
    - name: Total time
      run: |
         echo "DATE1=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
         end=$(date +%s)
         seconds=$(( end - start ))
         hour=$(( $seconds/3600 ))
         min=$(( ($seconds-${hour}*3600)/60 ))
         sec=$(( $seconds-${hour}*3600-${min}*60 ))
         HMS=`echo ${hour}:${min}:${sec}`
         echo "time=$HMS" >> $GITHUB_ENV
         
    - name: Telegram notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          🌺${{ env.PRODUCT_NAME }}编译完成
          开始时间：${{ env.DATE }}
          完成时间：${{ env.DATE1 }}
          编译耗时：${{ env.time }}
          更新信息：
          作者: ${{ env.author }}
          时间: ${{ env.date }}
          内容: ${{ env.commit }}
          hash: ${{ env.hash }}
